{"version":3,"sources":["../src/deflate.js"],"names":["deflate","node","index","path","id","__typename","route","join","fieldNames","Object","keys","result","fieldName","value","Array","isArray","map","childNode","concat","response"],"mappings":";;;;;;;AAEA;AACA,MAAMA,OAAO,GAAG,CAACC,IAAD,EAAeC,KAAf,EAA8BC,IAA9B,KAA+D;AAC7E,MAAIF,IAAI,IAAIA,IAAI,CAACG,EAAb,IAAmBH,IAAI,CAACI,UAA5B,EAAwC;AACtC,UAAMC,KAAK,GAAGH,IAAI,CAACI,IAAL,CAAU,GAAV,CAAd;;AAEA,QAAIL,KAAK,CAACI,KAAD,CAAL,IAAgBJ,KAAK,CAACI,KAAD,CAAL,CAAaL,IAAI,CAACI,UAAlB,CAAhB,IAAiDH,KAAK,CAACI,KAAD,CAAL,CAAaL,IAAI,CAACI,UAAlB,EAA8BJ,IAAI,CAACG,EAAnC,CAArD,EAA6F;AAC3F,aAAO;AACL;AACAC,QAAAA,UAAU,EAAEJ,IAAI,CAACI,UAFZ;AAGLD,QAAAA,EAAE,EAAEH,IAAI,CAACG;AAHJ,OAAP;AAKD,KAND,MAMO;AACL,UAAI,CAACF,KAAK,CAACI,KAAD,CAAV,EAAmB;AACjBJ,QAAAA,KAAK,CAACI,KAAD,CAAL,GAAe,EAAf;AACD;;AAED,UAAI,CAACJ,KAAK,CAACI,KAAD,CAAL,CAAaL,IAAI,CAACI,UAAlB,CAAL,EAAoC;AAClCH,QAAAA,KAAK,CAACI,KAAD,CAAL,CAAaL,IAAI,CAACI,UAAlB,IAAgC,EAAhC;AACD;;AAEDH,MAAAA,KAAK,CAACI,KAAD,CAAL,CAAaL,IAAI,CAACI,UAAlB,EAA8BJ,IAAI,CAACG,EAAnC,IAAyC,IAAzC;AACD;AACF;;AAED,QAAMI,UAAU,GAAGC,MAAM,CAACC,IAAP,CAAYT,IAAZ,CAAnB;AAEA,QAAMU,MAAM,GAAG,EAAf;;AAEA,OAAK,MAAMC,SAAX,IAAwBJ,UAAxB,EAAoC;AAClC,UAAMK,KAAK,GAAGZ,IAAI,CAACW,SAAD,CAAlB;;AAEA,QAAIE,KAAK,CAACC,OAAN,CAAcF,KAAd,CAAJ,EAA0B;AACxBF,MAAAA,MAAM,CAACC,SAAD,CAAN,GAAoBC,KAAK,CAACG,GAAN,CAAWC,SAAD,IAAe;AAC3C,YAAI,OAAOA,SAAP,KAAqB,QAAzB,EAAmC;AACjC,iBAAOA,SAAP;AACD;;AAED,eAAOjB,OAAO,CAACiB,SAAD,EAAYf,KAAZ,EAAmBC,IAAI,CAACe,MAAL,CAAY,CAACN,SAAD,CAAZ,CAAnB,CAAd;AACD,OANmB,CAApB;AAOD,KARD,MAQO,IAAI,OAAOC,KAAP,KAAiB,QAAjB,IAA6BA,KAAK,KAAK,IAA3C,EAAiD;AACtDF,MAAAA,MAAM,CAACC,SAAD,CAAN,GAAoBZ,OAAO,CAACa,KAAD,EAAQX,KAAR,EAAeC,IAAI,CAACe,MAAL,CAAY,CAACN,SAAD,CAAZ,CAAf,CAA3B;AACD,KAFM,MAEA;AACLD,MAAAA,MAAM,CAACC,SAAD,CAAN,GAAoBC,KAApB;AACD;AACF;;AAED,SAAOF,MAAP;AACD,CA9CD;;eAgDgBQ,QAAD,IAAsB;AACnC,QAAMjB,KAAK,GAAG,EAAd;AAEA,SAAOF,OAAO,CAACmB,QAAD,EAAWjB,KAAX,EAAkB,EAAlB,CAAd;AACD,C","sourcesContent":["// @flow\n\n// eslint-disable-next-line complexity\nconst deflate = (node: Object, index: Object, path: $ReadOnlyArray<string>) => {\n  if (node && node.id && node.__typename) {\n    const route = path.join(',');\n\n    if (index[route] && index[route][node.__typename] && index[route][node.__typename][node.id]) {\n      return {\n        // eslint-disable-next-line id-match\n        __typename: node.__typename,\n        id: node.id\n      };\n    } else {\n      if (!index[route]) {\n        index[route] = {};\n      }\n\n      if (!index[route][node.__typename]) {\n        index[route][node.__typename] = {};\n      }\n\n      index[route][node.__typename][node.id] = true;\n    }\n  }\n\n  const fieldNames = Object.keys(node);\n\n  const result = {};\n\n  for (const fieldName of fieldNames) {\n    const value = node[fieldName];\n\n    if (Array.isArray(value)) {\n      result[fieldName] = value.map((childNode) => {\n        if (typeof childNode === 'string') {\n          return childNode;\n        }\n\n        return deflate(childNode, index, path.concat([fieldName]));\n      });\n    } else if (typeof value === 'object' && value !== null) {\n      result[fieldName] = deflate(value, index, path.concat([fieldName]));\n    } else {\n      result[fieldName] = value;\n    }\n  }\n\n  return result;\n};\n\nexport default (response: Object) => {\n  const index = {};\n\n  return deflate(response, index, []);\n};\n"],"file":"deflate.js"}